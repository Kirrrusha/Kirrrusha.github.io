{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selectedOption","periodOption","workDay","label","value","hexColor","period","values","localizer","BigCalendar","momentLocalizer","moment","handleSelectWorkDay","_this","setState","changeValues","handleSelectPeriod","eventStyleGetter","event","style","backgroundColor","borderRadius","opacity","color","border","display","_this$state","this","indexWorkDay","findIndex","w","selectedValues","filter","e","index","map","title","start","add","format","end","allDay","concat","i","push","length","_this$state2","react_default","a","createElement","className","padding","react_select_esm","onChange","options","placeholder","lib_default","events","step","defaultView","window","innerWidth","views","Views","MONTH","WEEK","startAccessor","endAccessor","eventPropGetter","showMultiDayTimes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96697d67.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\nimport BigCalendar from 'react-big-calendar';\nimport BigCalendarCSS from 'react-big-calendar/lib/css/react-big-calendar.css';\nimport moment from 'moment';\n// import 'moment/locale/ru';\nimport Select from 'react-select';\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\n\n\nclass App extends Component {\n\n  state = {\n    selectedOption: null,\n    periodOption: null,\n    workDay: [\n      {\n        label: 'В день',\n        value: 'Day',\n        hexColor: '#184af0'\n      },\n      {\n        label: 'В ночь',\n        value: 'Night',\n        hexColor: '#ffea00'\n      },\n      {\n        label: 'После ночи',\n        value: 'After night',\n        hexColor: '#c22994'\n      },\n      {\n        label: 'Отдых',\n        value: 'relax',\n        hexColor: '#ff0303'\n      }\n    ],\n    period: [\n      {\n        label: '1 месяц',\n        value: 1\n      },\n      {\n        label: '2 месяца',\n        value: 2\n      },\n      {\n        label: '3 месяца',\n        value: 3\n      },\n      {\n        label: '4 месяца',\n        value: 4\n      },\n      {\n        label: '5 месяцев',\n        value: 5\n      },\n      {\n        label: 'Пол-года',\n        value: 6\n      },\n    ],\n    values: []\n  };\n\n  localizer = BigCalendar.momentLocalizer(moment);\n\n  handleSelectWorkDay = (selectedOption) => {\n    this.setState({ selectedOption }, () => this.changeValues());\n  }\n\n  handleSelectPeriod = (periodOption) => {\n    this.setState({ periodOption }, () => this.changeValues());\n  }\n\n  changeValues() {\n    const {workDay, periodOption, selectedOption} = this.state;\n    if (periodOption && selectedOption) {\n      let values = [];\n      const indexWorkDay = workDay.findIndex(w => w.value === selectedOption.value);\n      let selectedValues = workDay.filter((e, index) => {\n        if (index >= indexWorkDay) {\n          return e;\n        }\n      });\n      selectedValues = selectedValues.map((e, index) => {\n        return {\n          title: e.label,\n          start: moment().add(index, 'days').format('MMMM DD YYYY'),\n          end: moment().add(index, 'days').format('MMMM DD YYYY'),\n          allDay: true,\n          hexColor: e.hexColor\n        }\n      });\n      values = values.concat(selectedValues);\n      for (let i = 0; i < periodOption['value'] * 30; i++) {\n        values.push({\n          title: workDay[i % 4].label,\n          start: moment().add(i + selectedValues.length, 'days').format('MMMM DD YYYY'),\n          end: moment().add(i + selectedValues.length, 'days').format('MMMM DD YYYY'),\n          hexColor: workDay[i % 4].hexColor,\n          allDay: true\n        });\n      }\n      this.setState({ values });\n    }\n  }\n\n  eventStyleGetter =  (event) => {\n  const backgroundColor = event.hexColor;\n  const style = {\n    backgroundColor: backgroundColor,\n    borderRadius: '0px',\n    opacity: 0.8,\n    color: 'black',\n    border: '0px',\n    display: 'block'\n  };\n  return {\n    style: style\n  };\n}\n\n  render() {\n    const { selectedOption, workDay, periodOption, period, values } = this.state;\n    if (!values) return null;\n    return (\n      <div className=\"example\" style={{padding: '0 10px'}}>\n        <h1>Календарь смен</h1>\n        <Select\n          value={selectedOption}\n          onChange={this.handleSelectWorkDay}\n          options={workDay}\n          className=\"select\"\n          placeholder={'Выберите рабочий день'}\n        />\n\n        <Select\n          value={periodOption}\n          onChange={this.handleSelectPeriod}\n          options={period}\n          className=\"select\"\n          placeholder={'Выберите период расчёта '}\n        />\n\n        <BigCalendar\n          localizer={this.localizer}\n          events={values}\n          step={60}\n          defaultView={window.innerWidth > 500 ? 'month' : 'week'}\n          views={[BigCalendar.Views.MONTH, BigCalendar.Views.WEEK]}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          eventPropGetter={(this.eventStyleGetter)}\n          showMultiDayTimes\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}