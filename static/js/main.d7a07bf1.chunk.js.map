{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selectedOption","periodOption","workDay","label","value","hexColor","period","values","localizer","BigCalendar","momentLocalizer","moment","handleSelectWorkDay","_this","setState","changeValues","handleSelectPeriod","eventStyleGetter","event","start","end","isSelected","style","backgroundColor","borderRadius","opacity","color","border","display","_this$state","this","indexWorkDay","findIndex","w","selectedValues","filter","e","index","map","title","add","format","concat","i","length","push","_this$state2","react_default","a","createElement","className","react_select_esm","onChange","options","lib_default","events","step","startAccessor","endAccessor","eventPropGetter","showMultiDayTimes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7a07bf1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.scss';\r\nimport BigCalendar from 'react-big-calendar';\r\nimport BigCalendarCSS from 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport moment from 'moment';\r\nimport Select from 'react-select';\r\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    selectedOption: null,\r\n    periodOption: null,\r\n    workDay: [\r\n      {\r\n        label: 'В день',\r\n        value: 'Day',\r\n        hexColor: '#184af0'\r\n      },\r\n      {\r\n        label: 'В ночь',\r\n        value: 'Night',\r\n        hexColor: '#ffea00'\r\n      },\r\n      {\r\n        label: 'После ночи',\r\n        value: 'After night',\r\n        hexColor: '#c22994'\r\n      },\r\n      {\r\n        label: 'Отдых',\r\n        value: 'relax',\r\n        hexColor: '#ff0303'\r\n      }\r\n    ],\r\n    period: [\r\n      {\r\n        label: '1 месяц',\r\n        value: 1\r\n      },\r\n      {\r\n        label: '2 месяца',\r\n        value: 2\r\n      },\r\n      {\r\n        label: '3 месяца',\r\n        value: 3\r\n      },\r\n      {\r\n        label: '4 месяца',\r\n        value: 4\r\n      },\r\n      {\r\n        label: '5 месяцев',\r\n        value: 5\r\n      },\r\n      {\r\n        label: 'Пол-года',\r\n        value: 6\r\n      },\r\n    ],\r\n    values: []\r\n  };\r\n\r\n  localizer = BigCalendar.momentLocalizer(moment);\r\n\r\n  handleSelectWorkDay = (selectedOption) => {\r\n    this.setState({ selectedOption }, () => this.changeValues());\r\n  }\r\n\r\n  handleSelectPeriod = (periodOption) => {\r\n    this.setState({ periodOption }, () => this.changeValues());\r\n  }\r\n\r\n  changeValues() {\r\n    const {workDay, periodOption, period, selectedOption} = this.state;\r\n    if (periodOption && selectedOption) {\r\n      let values = [];\r\n      const indexWorkDay = workDay.findIndex(w => w.value === selectedOption.value);\r\n      let selectedValues = workDay.filter((e, index) => {\r\n        if (index >= indexWorkDay) {\r\n          return e;\r\n        }\r\n      });\r\n      selectedValues = selectedValues.map((e, index) => {\r\n        return {\r\n          title: e.label,\r\n          start: moment().add(index, 'days').format('MMMM DD YYYY'),\r\n          end: moment().add(index, 'days').format('MMMM DD YYYY'),\r\n          hexColor: e.hexColor\r\n        }\r\n      })\r\n      values = values.concat(selectedValues);\r\n      for (let i = selectedValues.length; i < periodOption['value'] * 30; i++) {\r\n        values.push({\r\n          title: workDay[i % 4].label,\r\n          start: moment().add(i, 'days').format('MMMM DD YYYY'),\r\n          end: moment().add(i, 'days').format('MMMM DD YYYY'),\r\n          hexColor: workDay[i % 4].hexColor\r\n        });\r\n      }\r\n      this.setState({ values });\r\n    }\r\n  }\r\n\r\n  eventStyleGetter =  (event, start, end, isSelected) => {\r\n  var backgroundColor = event.hexColor;\r\n  var style = {\r\n    backgroundColor: backgroundColor,\r\n    borderRadius: '0px',\r\n    opacity: 0.8,\r\n    color: 'black',\r\n    border: '0px',\r\n    display: 'block'\r\n  };\r\n  return {\r\n    style: style\r\n  };\r\n}\r\n\r\n  render() {\r\n    const { selectedOption, workDay, periodOption, period, values } = this.state;\r\n    if (!values) return null;\r\n    return (\r\n      <div className=\"example\">\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.handleSelectWorkDay}\r\n          options={workDay}\r\n        />\r\n\r\n        <Select\r\n          value={periodOption}\r\n          onChange={this.handleSelectPeriod}\r\n          options={period}\r\n        />\r\n\r\n        <BigCalendar\r\n          localizer={this.localizer}\r\n          events={values}\r\n          step={60}\r\n          startAccessor=\"start\"\r\n          endAccessor=\"end\"\r\n          eventPropGetter={(this.eventStyleGetter)}\r\n          showMultiDayTimes\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}